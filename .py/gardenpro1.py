import telebot
from telebot import types
import requests
from datetime import datetime, timedelta
from openai import OpenAI
import logging
import calendar
from apscheduler.schedulers.background import BackgroundScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('8008817220:AAE1Ct3dvzDljz3NFt2dHS99oDSyMpkgAk4')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# API-–∫–ª—é—á –æ—Ç OpenWeatherMap
API_KEY = '4a00d55bf645cc138e67fad888b89495'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á

# API-–∫–ª—é—á –æ—Ç OpenAI
OPENAI_API_KEY = 'sk-lUzFuUtf0DYYVSeJceQEy6OcpoM5rEnc2G9YXYI1H2EiHcc9gOOfTDODv8iY'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler()
scheduler.start()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_plans = {}


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    show_main_menu(message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_location = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫", request_location=True)
    button_advice = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –ø–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é üå±")
    button_calendar = types.KeyboardButton("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ—Å–∞–¥–æ–∫ üìÖ")
    button_view_plans = types.KeyboardButton("–ú–æ–∏ –ø–ª–∞–Ω—ã üìã")
    button_reminders = types.KeyboardButton("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üîî")
    button_site = types.KeyboardButton("–°–∞–π—Ç –¥–ª—è —Å–∞–¥–æ–≤–æ–¥–æ–≤ üåê")
    markup.add(button_location, button_advice, button_calendar,
               button_view_plans, button_reminders, button_site)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–∞–π—Ç –¥–ª—è —Å–∞–¥–æ–≤–æ–¥–æ–≤ üåê"
@bot.message_handler(func=lambda message: message.text == "–°–∞–π—Ç –¥–ª—è —Å–∞–¥–æ–≤–æ–¥–æ–≤ üåê")
def send_site_link(message):
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://www.dacha6.ru/")
    markup.add(button)
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –¥–ª—è —Å–∞–¥–æ–≤–æ–¥–æ–≤:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@bot.message_handler(content_types=['location'])
def handle_location(message):
    latitude = message.location.latitude
    longitude = message.location.longitude
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {latitude}, {longitude}")

    city = get_city_by_coordinates(latitude, longitude)
    if city:
        weather_data = get_weather(latitude, longitude)
        if weather_data:
            bot.send_message(message.chat.id, weather_data)
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –≤–∞—à–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ—Å–∞–¥–æ–∫ üìÖ"
@bot.message_handler(func=lambda message: message.text == "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ—Å–∞–¥–æ–∫ üìÖ")
def handle_calendar_button(message):
    show_calendar(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø–ª–∞–Ω—ã üìã"
@bot.message_handler(func=lambda message: message.text == "–ú–æ–∏ –ø–ª–∞–Ω—ã üìã")
def handle_view_plans_button(message):
    view_plans(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üîî"
@bot.message_handler(func=lambda message: message.text == "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üîî")
def handle_reminders_button(message):
    ask_for_reminder_type(message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def show_calendar(message):
    now = datetime.now()
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("<<", callback_data=f"prev_month_{now.year}_{now.month}"),
        types.InlineKeyboardButton(f"{calendar.month_name[now.month]} {now.year}", callback_data="ignore"),
        types.InlineKeyboardButton(">>", callback_data=f"next_month_{now.year}_{now.month}")
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    cal = calendar.monthcalendar(now.year, now.month)
    for week in cal:
        row = []
        for day in week:
            if day == 0:
                row.append(types.InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                row.append(types.InlineKeyboardButton(str(day), callback_data=f"day_{now.year}_{now.month}_{day}"))
        markup.row(*row)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    try:
        if call.data.startswith("prev_month_"):
            year, month = map(int, call.data.split("_")[2:])
            if month == 1:
                year -= 1
                month = 12
            else:
                month -= 1
            update_calendar(call.message, year, month)
        elif call.data.startswith("next_month_"):
            year, month = map(int, call.data.split("_")[2:])
            if month == 12:
                year += 1
                month = 1
            else:
                month += 1
            update_calendar(call.message, year, month)
        elif call.data.startswith("day_"):
            year, month, day = map(int, call.data.split("_")[1:])
            selected_date = datetime(year, month, day).strftime("%Y-%m-%d")
            ask_for_plan(call.message, selected_date)
        elif call.data == "ignore":
            bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def update_calendar(message, year, month):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("<<", callback_data=f"prev_month_{year}_{month}"),
        types.InlineKeyboardButton(f"{calendar.month_name[month]} {year}", callback_data="ignore"),
        types.InlineKeyboardButton(">>", callback_data=f"next_month_{year}_{month}")
    )

    cal = calendar.monthcalendar(year, month)
    for week in cal:
        row = []
        for day in week:
            if day == 0:
                row.append(types.InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                row.append(types.InlineKeyboardButton(str(day), callback_data=f"day_{year}_{month}_{day}"))
        markup.row(*row)

    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", message.chat.id, message.message_id, reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–ª–∞–Ω–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
def ask_for_plan(message, selected_date):
    msg = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω –Ω–∞ {selected_date}:")
    bot.register_next_step_handler(msg, save_plan, selected_date)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
def save_plan(message, selected_date):
    try:
        user_id = message.from_user.id
        if user_id not in user_plans:
            user_plans[user_id] = {}
        user_plans[user_id][selected_date] = message.text
        bot.send_message(message.chat.id, f"‚úÖ –ü–ª–∞–Ω –Ω–∞ {selected_date} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
def view_plans(message):
    try:
        user_id = message.from_user.id
        if user_id in user_plans and user_plans[user_id]:
            plans_text = "üìã –í–∞—à–∏ –ø–ª–∞–Ω—ã:\n\n"
            for date, plan in user_plans[user_id].items():
                if date != "reminders":  # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω–æ–≤
                    plans_text += f"üìÖ {date}: {plan}\n"
            bot.send_message(message.chat.id, plans_text)
        else:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–ª–∞–Ω–æ–≤: {e}")
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def ask_for_reminder_type(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_water = types.KeyboardButton("–ü–æ–ª–∏–≤ üíß")
    button_fertilize = types.KeyboardButton("–ü–æ–¥–∫–æ—Ä–º–∫–∞ üåø")
    button_care = types.KeyboardButton("–£—Ö–æ–¥ üå±")
    button_back = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
    markup.add(button_water, button_fertilize, button_care, button_back)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è"
@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
def handle_back_button(message):
    show_main_menu(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.text in ["–ü–æ–ª–∏–≤ üíß", "–ü–æ–¥–∫–æ—Ä–º–∫–∞ üåø", "–£—Ö–æ–¥ üå±"])
def handle_reminder_type_selection(message):
    reminder_type = message.text
    ask_for_reminder_date(message, reminder_type)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def ask_for_reminder_date(message, reminder_type):
    msg = bot.send_message(
        message.chat.id,
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è '{reminder_type}' –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, {datetime.now().strftime('%Y-%m-%d %H:%M')}):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(msg, save_reminder, reminder_type)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def save_reminder(message, reminder_type):
    try:
        user_id = message.from_user.id
        reminder_datetime_str = message.text

        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        reminder_datetime = datetime.strptime(reminder_datetime_str, "%Y-%m-%d %H:%M")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if reminder_datetime <= datetime.now():
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º.")
            return

        if user_id not in user_plans:
            user_plans[user_id] = {}

        if "reminders" not in user_plans[user_id]:
            user_plans[user_id]["reminders"] = []

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        user_plans[user_id]["reminders"].append({
            "type": reminder_type,
            "datetime": reminder_datetime_str,
            "timestamp": reminder_datetime.timestamp()
        })

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        schedule_reminder(user_id, reminder_type, reminder_datetime)

        bot.send_message(
            message.chat.id,
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{reminder_type}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_datetime_str}."
        )

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def schedule_reminder(user_id, reminder_type, reminder_datetime):
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        delay = (reminder_datetime - datetime.now()).total_seconds()

        if delay > 0:
            scheduler.add_job(
                send_reminder,
                'date',
                run_date=reminder_datetime,
                args=[user_id, reminder_type],
                id=f"{user_id}_{reminder_datetime.timestamp()}"
            )
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è user_id={user_id} –Ω–∞ {reminder_datetime}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def send_reminder(user_id, reminder_type):
    try:
        bot.send_message(
            user_id,
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_type}!\n\n" +
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –ø–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é üå±"
@bot.message_handler(func=lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –ø–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é üå±")
def handle_advice_button(message):
    ask_for_plant_name(message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
def ask_for_plant_name(message):
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–æ–∑—ã, –ø–æ–º–∏–¥–æ—Ä—ã, —è–±–ª–æ–Ω–∏):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(msg, get_growing_advice)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é
def get_growing_advice(message):
    plant_name = message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è: {plant_name}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç—ã –æ—Ç OpenAI
    bot.send_chat_action(message.chat.id, 'typing')
    advice = get_plant_advice_from_openai(plant_name)

    if advice:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram
        if len(advice) > 4000:
            for x in range(0, len(advice), 4000):
                bot.send_message(message.chat.id, advice[x:x + 4000])
        else:
            bot.send_message(message.chat.id, advice)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –æ—Ç OpenAI
def get_plant_advice_from_openai(plant_name):
    try:
        prompt = (
            f"–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é {plant_name} –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
            "–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ –ø–æ —É—Ö–æ–¥—É, –≤–∫–ª—é—á–∞—è –ø–æ–ª–∏–≤, –ø–æ–¥–∫–æ—Ä–º–∫—É, –æ—Å–≤–µ—â–µ–Ω–∏–µ, "
            "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–∂–∏–º –∏ –±–æ—Ä—å–±—É —Å –≤—Ä–µ–¥–∏—Ç–µ–ª—è–º–∏. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º "
            "–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
        )

        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system",
                 "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Å–∞–¥–æ–≤–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é —Ä–∞—Å—Ç–µ–Ω–∏–π."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1500
        )

        if response.choices and response.choices[0].message.content:
            return response.choices[0].message.content.strip()
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
def get_city_by_coordinates(lat, lon):
    url = f'http://api.openweathermap.org/geo/1.0/reverse?lat={lat}&lon={lon}&limit=1&appid={API_KEY}'
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        if data:
            return data[0].get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –≥–µ–æ API: {e}")
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
def get_weather(lat, lon):
    url = f'http://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={API_KEY}&units=metric&lang=ru'
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()

        if data.get('cod') != '200':
            return None

        city = data['city']['name']
        forecast = data['list']
        weather_info = f"üå¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}:\n\n"

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–∞—Ç–µ (—Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞)
        today = datetime.now().date()
        tomorrow = today + timedelta(days=1)

        for day, date in [("–°–µ–≥–æ–¥–Ω—è", today), ("–ó–∞–≤—Ç—Ä–∞", tomorrow)]:
            weather_info += f"üìÖ {day} ({date.strftime('%d.%m.%Y')}):\n"

            day_forecasts = [f for f in forecast if datetime.fromtimestamp(f['dt']).date() == date]
            if not day_forecasts:
                weather_info += "   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
                continue

            # –ë–µ—Ä–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–π, –¥–Ω–µ–≤–Ω–æ–π –∏ –≤–µ—á–µ—Ä–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
            for f in [day_forecasts[0], day_forecasts[len(day_forecasts) // 2], day_forecasts[-1]]:
                time = datetime.fromtimestamp(f['dt']).strftime('%H:%M')
                weather_info += (
                    f"   üïí {time}: "
                    f"{f['weather'][0]['description'].capitalize()}, "
                    f"{round(f['main']['temp'])}¬∞C, "
                    f"–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {round(f['main']['feels_like'])}¬∞C, "
                    f"–≤–ª–∞–∂–Ω–æ—Å—Ç—å {f['main']['humidity']}%, "
                    f"–≤–µ—Ç–µ—Ä {f['wind']['speed']} –º/—Å\n"
                )
            weather_info += "\n"

        return weather_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ø–æ–≥–æ–¥–Ω–æ–º—É API: {e}")
    return None


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        scheduler.shutdown()